name: CI/CD - Build, Push, Deploy to ECS

on:
  push:
    branches: [ "main" ]

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  SPRING_DATASOURCE_URL_PROD: ${{ secrets.SPRING_DATASOURCE_URL_PROD }}
  SPRING_DATASOURCE_USERNAME_PROD: ${{ secrets.SPRING_DATASOURCE_USERNAME_PROD }}
  SPRING_DATASOURCE_PASSWORD_PROD: ${{ secrets.SPRING_DATASOURCE_PASSWORD_PROD }}
  REDIS_HOST_PROD: ${{ secrets.REDIS_HOST_PROD }}
  REDIS_PORT_PROD: ${{ secrets.REDIS_PORT_PROD }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
  JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  DOCKER_ACCOUNT: ${{ secrets.DOCKER_ACCOUNT }}

permissions:
  contents: read

jobs:
  deploy:
    name: Build & Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant permission to gradlew
        run: chmod +x ./gradlew

      - name: Build Spring Boot with Gradle
        run: ./gradlew clean build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t ${{env.ECR_REPOSITORY}} .
          docker tag ${{env.ECR_REPOSITORY}}:latest ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest
          echo "image=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest" >> $GITHUB_OUTPUT

      - name: Make .aws directory for task definition
        run: mkdir -p .aws

      - name: Download task definition from S3
        run: |
          aws s3 cp s3://${{ env.AWS_S3_BUCKET_NAME }}/env/ecs/task-definitions/chainware-spring-task-definition.json .aws/task-definition.json

      - name: Check downloaded task definition
        run: cat .aws/task-definition.json

      - name: Render new ECS task definition with environment variables
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
